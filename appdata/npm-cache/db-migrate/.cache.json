{"_id":"db-migrate","_rev":"74-3337eea48c93f462aa4f1aab5ca429f2","name":"db-migrate","description":"Database migration framework for node.js","dist-tags":{"latest":"0.6.3"},"versions":{"0.0.1":{"name":"db-migrate","description":"Database migration framework for node.js","keywords":["database","db","migrate","migration","sqlite","mysql"],"homepage":"https://github.com/nearinfinity/node-db-migrate","version":"0.0.1","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"licenses":[{"type":"MIT"}],"repositories":[{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"}],"dependencies":{"sqlite3":"~2.1.1","mysql":"~0.9.5","optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.5.13","db-info":"~0.0.1"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.0.1","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"06beecb745d08426b2552e41faf18a3f066a5c6f","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.0.1.tgz"},"directories":{}},"0.0.2":{"name":"db-migrate","description":"Database migration framework for node.js","keywords":["database","db","migrate","migration","sqlite","mysql"],"homepage":"https://github.com/nearinfinity/node-db-migrate","version":"0.0.2","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"licenses":[{"type":"MIT"}],"repositories":[{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"}],"dependencies":{"sqlite3":"~2.1.1","mysql":"~0.9.5","optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.5.13","db-info":"~0.0.1"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.0.2","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"93009da666a41b4015cf9ff8c81fc5e48be2fca0","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.0.2.tgz"},"directories":{}},"0.0.3":{"name":"db-migrate","description":"Database migration framework for node.js","keywords":["database","db","migrate","migration","sqlite","mysql"],"homepage":"https://github.com/nearinfinity/node-db-migrate","version":"0.0.3","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"licenses":[{"type":"MIT"}],"repositories":[{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"}],"dependencies":{"sqlite3":"~2.1.1","mysql":"~0.9.5","optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.5.13","db-info":"~0.0.1"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.0.3","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"19c5a6bf05faebb351d648b23ccaabde605fd20c","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.0.3.tgz"},"directories":{}},"0.0.4":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"homepage":"https://github.com/nearinfinity/node-db-migrate","version":"0.0.4","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"licenses":[{"type":"MIT"}],"repositories":[{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"}],"dependencies":{"optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.5.13","db-info":"~0.0.1"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.0.4","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"0857640c6cdb2bff8bd1327d18d79af61c5d9ebd","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.0.4.tgz"},"directories":{}},"0.0.5":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"homepage":"https://github.com/nearinfinity/node-db-migrate","version":"0.0.5","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"licenses":[{"type":"MIT"}],"repositories":[{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"}],"dependencies":{"optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.5.13","db-info":"~0.0.1"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.0.5","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"07a990eb180438a4920887f46fcd9d4be6dc6577","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.0.5.tgz"},"directories":{}},"0.0.6":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.0.6","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"git://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.5.13","db-info":"~0.0.1"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.0.6","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"f9ef0e493d1668b61b19cdcc52713d11958b56d4","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.0.6.tgz"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","directories":{}},"0.1.0":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.1.0","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"git://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.6.2","db-info":"~0.0.1"},"scripts":{"test":"vows"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.1.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.8","_defaultsLoaded":true,"dist":{"shasum":"b3d302bced0a4d4bab9e5a4a965a8ccff0ec06ca","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.1.0.tgz"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","directories":{}},"0.1.1":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.1.1","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"git://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.6.2","db-info":"~0.0.1"},"scripts":{"test":"vows"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.1.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.8","_defaultsLoaded":true,"dist":{"shasum":"dbee6f4a665458bc9653061215023c2624035d30","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.1.1.tgz"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","directories":{}},"0.1.2":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.1.2","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"git://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.6.2","db-info":"~0.0.1"},"scripts":{"test":"vows"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.1.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.8","_defaultsLoaded":true,"dist":{"shasum":"d3250111fcf2878701d38c957a4dfe810832b7c7","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.1.2.tgz"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","directories":{}},"0.1.3":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.1.3","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"git://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15"},"devDependencies":{"vows":"~0.6.2","db-info":"~0.0.1"},"scripts":{"test":"vows"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.1.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.8","_defaultsLoaded":true,"dist":{"shasum":"6c072875558dea2dd0247adf875ed9c29d042b15","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.1.3.tgz"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","directories":{}},"0.1.4":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.1.4","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"git://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14"},"devDependencies":{"vows":"~0.6.2","db-info":"~0.0.1"},"scripts":{"test":"vows"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.1.4","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.8","_defaultsLoaded":true,"dist":{"shasum":"c92700e2423724bb323aa27cc4a595a4768b241c","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.1.4.tgz"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      },\n      \n      \"pg\": {\n        \"driver\": \"pg\",\n        \"user\": \"test\",\n        \"password\": \"test\",\n        \"host\": \"localhost\",\n        \"database\": \"mydb\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","directories":{}},"0.1.5":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.1.5","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"git://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.3.2"},"scripts":{"test":"vows"},"_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"_id":"db-migrate@0.1.5","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.8","_defaultsLoaded":true,"dist":{"shasum":"dfcc7bc6d51526538681699c86cc5d33c9974ae2","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.1.5.tgz"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      },\n      \n      \"pg\": {\n        \"driver\": \"pg\",\n        \"user\": \"test\",\n        \"password\": \"test\",\n        \"host\": \"localhost\",\n        \"database\": \"mydb\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","directories":{}},"0.2.0":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.0","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      },\n      \n      \"pg\": {\n        \"driver\": \"pg\",\n        \"user\": \"test\",\n        \"password\": \"test\",\n        \"host\": \"localhost\",\n        \"database\": \"mydb\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"db-migrate@0.2.0","dist":{"shasum":"29bcaf8c83593b4caaef59d4342a6c2ea5cae541","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.0.tgz"},"directories":{}},"0.2.1":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.1","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(db, callback){\n      callback();\n    };\n\n    exports.down = function(callback){\n      callback();\n    };\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', callback);\n      };\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n      exports.up = function(db, callback){\n        db.createTable('owners', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, callback);\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('owners', callback);\n      };\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n      exports.up = function(db, callback){\n        db.createTable('pets', {\n          id: { type: 'int', primaryKey: true },\n          name: 'string'\n        }, createOwners);\n\n        function createOwners(err) {\n          if (err) { callback(err); return; }\n          db.createTable('owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }, callback);\n        }\n      };\n\n      exports.down = function(db, callback){\n        db.dropTable('pets', function(err) {\n          if (err) { callback(err); return; }\n          db.dropTable('owners', callback); \n        })\n      };\n\nor use the async library to simplify things a bit, such as:\n\n      var async = require('async');\n\n      exports.up = function(db, callback){\n        async.series([\n          db.createTable.bind(db, 'pets', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          }),\n          db.createTable.bind(db, 'owners', {\n            id: { type: 'int', primaryKey: true },\n            name: 'string'\n          })\n        ], callback);\n      };\n\n      exports.down = function(db, callback){\n        async.series([\n          db.dropTable.bind(db, 'pets'),\n          db.dropTable.bind(db, 'owners')\n        ], callback);\n      };\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n    {\n      \"dev\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \"~/dev.db\"\n      },\n\n      \"test\": {\n        \"driver\": \"sqlite3\",\n        \"filename\": \":memory:\"\n      },\n\n      \"prod\": {\n        \"driver\": \"mysql\",\n        \"user\": \"root\",\n        \"password\": \"root\"\n      },\n      \n      \"pg\": {\n        \"driver\": \"pg\",\n        \"user\": \"test\",\n        \"password\": \"test\",\n        \"host\": \"localhost\",\n        \"database\": \"mydb\"\n      }\n    }\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n    // with no table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        id: { type: 'int', primaryKey: true, autoIncrement: true },\n        name: 'string'  // shorthand notation\n      }, callback);\n    }\n\n    // with table options\n    exports.up = function(db, callback) {\n      db.createTable('pets', {\n        columns: {\n          id: { type: 'int', primaryKey: true, autoIncrement: true },\n          name: 'string'  // shorthand notation\n        },\n        ifNotExists: true\n      }, callback);\n    }\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"db-migrate@0.2.1","dist":{"shasum":"274863ff6070cefa1fd0e244f4bdf6a4c4bf48c2","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.1.tgz"},"directories":{}},"0.2.2":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.2","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n  \n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"db-migrate@0.2.2","dist":{"shasum":"5d4030c775d230b2673a0c49c8038a70fc9c54f2","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.2.3":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.3","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n  \n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"db-migrate@0.2.3","dist":{"shasum":"f6589e60966b40d91b3b0485e4c623f763046348","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.2.4":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.4","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n  \n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"db-migrate@0.2.4","dist":{"shasum":"41dd80fac233c0dd20225491b3313e056c5253ba","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.2.5":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.5","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. By default, environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYour database configuration can also be specified using a JavaScript\nfile. This is helpful when you'd like to manually instantiate and\nconfigure the database driver. Below is an example of what a\nJavaScript-based configuration file would need to look like.\n\n```javascript\nvar mysqlDriver = require('db-migrate/lib/driver/mysql');\nvar mysql = require('mysql');\nvar pgDriver = require('db-migrate/lib/driver/pg');\nvar pg = require('pg');\nvar sqlite3Driver = require('db-migrate/lib/driver/sqlite3');\nvar sqlite3 = require('sqlite3');\nvar sqlite3Mode = sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE;\n\nmodule.exports = {\n  dev: {\n    driver: new sqlite3.Database('~/dev.db', mode);\n  },\n\n  test: {\n    driver: new sqlite3.Database(':memory:', mode);\n  },\n\n  prod: {\n    driver: new mysql.createClient({\n      \"user\": \"root\",\n      \"password\": \"root\"\n    })\n  },\n\n  pg: {\n    driver: \n  }\n};\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database config file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex(indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"db-migrate@0.2.5","dist":{"shasum":"3a7d6d3806a625543d231b136d80a04512d0203f","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.5.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.2.6":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.6","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n  \n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"db-migrate@0.2.6","dist":{"shasum":"aca613c262a01c9e32a15ad595f9773dfbc4da25","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.6.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.2.7":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.7","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, for PostgreSQL, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.2.7","dist":{"shasum":"0b701311779bbb46a3619829515914229ad6c7b3","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.2.8":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.2.8","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, for PostgreSQL, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.2.8","dist":{"shasum":"ca66f2c47bdd0ea34acffb1f6c41a5b42cccdd5d","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.2.8.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.3.0":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.3.0","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, for PostgreSQL, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.3.0","dist":{"shasum":"713b41f4438e5af51fb61541dd5ddfd58b86914f","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.3.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.3.1":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.3.1","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, for PostgreSQL, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.3.1","dist":{"shasum":"5e5f68e5456fd541c2f25002da07159aa055ec20","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.3.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.3.2":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.3.2","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.0"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, for PostgreSQL, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.3.2","dist":{"shasum":"1a61dbef58d4477623d8089b785bbc69cf443740","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.3.2.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.4.0":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.4.0","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.1"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, for PostgreSQL, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.4.0","dist":{"shasum":"26e46cccd9d5b22f1b9a63c728a927c3ab4da4a1","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.4.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.4.1":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.4.1","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0"},"devDependencies":{"vows":"~0.6.2","db-meta":"~0.4.1"},"scripts":{"test":"node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback); \n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, for PostgreSQL, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.4.1","dist":{"shasum":"897914e3658230e9e1f416b1b77a0ce24e620733","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.4.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.4.2":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.4.2","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.1.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  }\n}\n```\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.4.2","dist":{"shasum":"e5b448e3a0e70cc2b6ad9bd1aeecae42a6be3916","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.4.2.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.5.0":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.5.0","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.5.0","dist":{"shasum":"02a19b13df62cf04487e24c9df9aefd1f14685f4","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.5.0.tgz"},"_from":".","_npmVersion":"1.2.24","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.5.1":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.5.1","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.5.1","dist":{"shasum":"584a00055b13f79d681289791a0809a765002275","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.5.1.tgz"},"_from":".","_npmVersion":"1.2.24","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.5.2":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.5.2","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n  --force-exit          Call system.exit() after migration run          [default: false]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.5.2","dist":{"shasum":"35d21d31203290c07d6e9961d83e543e4d46d891","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.5.2.tgz"},"_from":".","_npmVersion":"1.2.24","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.5.3":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.5.3","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n  --force-exit          Call system.exit() after migration run          [default: false]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.5.3","dist":{"shasum":"b282ccdeedee3944cea9e0fdb63d94cf7fa82b52","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.5.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.5.4":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle","email":"jeff.kunkle@nearinfinity.com"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.5.4","engines":{"node":">=0.6.0"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"bugs":{"url":"https://github.com/nearinfinity/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/nearinfinity/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n  --force-exit          Call system.exit() after migration run          [default: false]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.5.4","dist":{"shasum":"e789fd3b3e20291356e6e23632141b8ffa59a19f","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.5.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"directories":{}},"0.6.0":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.6.0","engines":{"node":">=0.6.0"},"bugs":{"url":"https://github.com/kunklejr/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/kunklejr/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n  --force-exit          Call system.exit() after migration run          [default: false]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nYou can also specify environment variables in your config file by using a special notation. Here is an example:\n```javascript\n{\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": {\"ENV\": \"PRODUCTION_USERNAME\"},\n    \"password\": {\"ENV\": \"PRODUCTION_PASSWORD\"}\n  },\n}\n```\nIn this case, db-migrate will search your environment for variables\ncalled `PRODUCTION_USERNAME` and `PRODUCTION_PASSWORD`, and use those values for the corresponding configuration entry.\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.6.0","dist":{"shasum":"5a5be2c12251faa8bbd32df9d896be301c9a3860","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.6.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"directories":{}},"0.6.1":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.6.1","engines":{"node":">=0.6.0"},"bugs":{"url":"https://github.com/kunklejr/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/kunklejr/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n  --force-exit          Call system.exit() after migration run          [default: false]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nYou can also specify environment variables in your config file by using a special notation. Here is an example:\n```javascript\n{\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": {\"ENV\": \"PRODUCTION_USERNAME\"},\n    \"password\": {\"ENV\": \"PRODUCTION_PASSWORD\"}\n  },\n}\n```\nIn this case, db-migrate will search your environment for variables\ncalled `PRODUCTION_USERNAME` and `PRODUCTION_PASSWORD`, and use those values for the corresponding configuration entry.\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jeff Kunkle\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.6.1","dist":{"shasum":"4940d23c8226f69fea7a6d3741b01b7ddf7ce3bb","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.6.1.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"directories":{}},"0.6.2":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.6.2","engines":{"node":">=0.6.0"},"bugs":{"url":"https://github.com/kunklejr/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/kunklejr/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n  --force-exit          Call system.exit() after migration run          [default: false]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nYou can also specify environment variables in your config file by using a special notation. Here is an example:\n```javascript\n{\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": {\"ENV\": \"PRODUCTION_USERNAME\"},\n    \"password\": {\"ENV\": \"PRODUCTION_PASSWORD\"}\n  },\n}\n```\nIn this case, db-migrate will search your environment for variables\ncalled `PRODUCTION_USERNAME` and `PRODUCTION_PASSWORD`, and use those values for the corresponding configuration entry.\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jeff Kunkle\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.6.2","dist":{"shasum":"9d588a78863e217c0f50f65086e29e1255a479ed","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.6.2.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"directories":{}},"0.6.3":{"name":"db-migrate","description":"Database migration framework for node.js","author":{"name":"Jeff Kunkle"},"bin":{"db-migrate":"./bin/db-migrate"},"keywords":["database","db","migrate","migration","sqlite","mysql"],"version":"0.6.3","engines":{"node":">=0.6.0"},"bugs":{"url":"https://github.com/kunklejr/node-db-migrate/issues"},"license":"MIT","repository":{"type":"git","url":"https://github.com/kunklejr/node-db-migrate.git"},"dependencies":{"optimist":"~0.3.0","async":"~0.1.15","semver":"~1.0.14","mkdirp":"~0.3.4","moment":"~1.7.2","pkginfo":"~0.3.0","parse-database-url":"~0.2.0"},"devDependencies":{"vows":"~0.7.0","db-meta":"~0.4.1","mysql":"~2.0.0","pg":"~1.0.0","sqlite3":"~2.1.0"},"scripts":{"test":"node node_modules/.bin/vows"},"readme":"# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|create] migrationName [options]\n\nOptions:\n  --env, -e             The environment to run the migrations under.    [default: \"dev\"]\n  --migrations-dir, -m  The directory containing your migration files.  [default: \"./migrations\"]\n  --count, -c           Max number of migrations to run.\n  --dry-run             Prints the SQL but doesn't run it.              [boolean]\n  --verbose, -v         Verbose mode.                                   [default: false]\n  --config              Location of the database.json file.             [default: \"./database.json\"]\n  --force-exit          Call system.exit() after migration run          [default: false]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('owners', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('owners', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true },\n    name: 'string'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable('owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable('pets', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable('owners', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require('async');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, 'pets', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    }),\n    db.createTable.bind(db, 'owners', {\n      id: { type: 'int', primaryKey: true },\n      name: 'string'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, 'pets'),\n    db.dropTable.bind(db, 'owners')\n  ], callback);\n};\n```\n\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  \"dev\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \"~/dev.db\"\n  },\n\n  \"test\": {\n    \"driver\": \"sqlite3\",\n    \"filename\": \":memory:\"\n  },\n\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": \"root\",\n    \"password\": \"root\"\n  },\n\n  \"pg\": {\n    \"driver\": \"pg\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"host\": \"localhost\",\n    \"database\": \"mydb\"\n  },\n\n  \"other\": \"postgres://uname:pw@server.com/dbname\"\n}\n```\n\nYou can also specify environment variables in your config file by using a special notation. Here is an example:\n```javascript\n{\n  \"prod\": {\n    \"driver\": \"mysql\",\n    \"user\": {\"ENV\": \"PRODUCTION_USERNAME\"},\n    \"password\": {\"ENV\": \"PRODUCTION_PASSWORD\"}\n  },\n}\n```\nIn this case, db-migrate will search your environment for variables\ncalled `PRODUCTION_USERNAME` and `PRODUCTION_PASSWORD`, and use those values for the corresponding configuration entry.\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it's not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven't yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Defaults\n\n## Migrations API\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    id: { type: 'int', primaryKey: true, autoIncrement: true },\n    name: 'string'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable('pets', {\n    columns: {\n      id: { type: 'int', primaryKey: true, autoIncrement: true },\n      name: 'string'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the MySQL and Postgres databases.\n\n```bash\nmysql -u root -e \"CREATE DATABASE db_migrate_test;\"\ncreatedb db_migrate_test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jeff Kunkle\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"db-migrate@0.6.3","dist":{"shasum":"decba813fb7fb2f95140e8fd60938fb2cb80498d","tarball":"http://registry.npmjs.org/db-migrate/-/db-migrate-0.6.3.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"kunklejr","email":"kunklejr@gmail.com"},"maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"directories":{}}},"readme":"","maintainers":[{"name":"kunklejr","email":"kunklejr@gmail.com"}],"time":{"0.0.1":"2011-12-19T21:09:59.939Z","0.0.2":"2011-12-31T18:54:42.917Z","0.0.3":"2012-01-03T02:03:07.712Z","0.0.4":"2012-02-02T15:16:05.117Z","0.0.5":"2012-03-02T02:14:16.430Z","0.0.6":"2012-04-02T15:38:48.976Z","0.1.0":"2012-05-30T02:04:35.987Z","0.1.1":"2012-06-05T15:30:13.618Z","0.1.2":"2012-06-06T15:14:30.642Z","0.1.3":"2012-06-09T00:57:16.472Z","0.1.4":"2012-07-09T19:24:50.246Z","0.1.5":"2012-07-12T17:05:44.637Z","0.2.0":"2012-08-03T16:00:39.635Z","0.2.1":"2012-08-15T01:13:11.504Z","0.2.2":"2012-08-28T13:38:17.490Z","0.2.3":"2012-08-29T12:01:10.987Z","0.2.4":"2012-09-17T15:07:23.877Z","0.2.5":"2012-10-10T17:07:55.021Z","0.2.6":"2012-10-30T14:24:41.443Z","0.2.7":"2012-11-17T14:01:54.739Z","0.2.8":"2012-12-07T20:39:10.634Z","0.3.0":"2013-01-22T16:25:06.801Z","0.3.1":"2013-01-28T20:20:07.999Z","0.3.2":"2013-02-04T15:06:22.989Z","0.4.0":"2013-02-28T01:34:27.855Z","0.4.1":"2013-03-06T17:02:34.265Z","0.4.2":"2013-04-29T12:12:42.872Z","0.5.0":"2013-06-03T12:16:49.649Z","0.5.1":"2013-06-05T12:22:09.175Z","0.5.2":"2013-06-16T02:55:52.267Z","0.5.3":"2013-07-10T13:21:16.024Z","0.5.4":"2013-07-13T00:19:53.554Z","0.6.0":"2013-09-13T01:01:40.584Z","0.6.1":"2013-09-20T17:18:50.153Z","0.6.2":"2013-10-08T01:03:44.849Z","0.6.3":"2013-11-25T23:05:50.482Z"},"author":{"name":"Jeff Kunkle"},"repository":{"type":"git","url":"https://github.com/kunklejr/node-db-migrate.git"},"users":{"paularmstrong":true},"_attachments":{"db-migrate-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":73,"digest":"md5-c5UcR6nShaqLc68/eUOj4A==","length":24654,"stub":true},"db-migrate-0.6.2.tgz":{"content_type":"application/octet-stream","revpos":71,"digest":"md5-j3sFye1YsntYWMPcNr2JZA==","length":24577,"stub":true},"db-migrate-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":69,"digest":"md5-awHrN6leVJCYA+OrOpKQlg==","length":24485,"stub":true},"db-migrate-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":67,"digest":"md5-81uSXVpDhJaXO0ydz11j+Q==","length":24398,"stub":true},"db-migrate-0.5.4.tgz":{"content_type":"application/octet-stream","revpos":64,"digest":"md5-/0gw3PS9oD5PG9hcXzfzVg==","length":23089,"stub":true},"db-migrate-0.5.3.tgz":{"content_type":"application/octet-stream","revpos":62,"digest":"md5-re64XF6sE5O5xpA76qwIkQ==","length":22915,"stub":true},"db-migrate-0.5.2.tgz":{"content_type":"application/octet-stream","revpos":60,"digest":"md5-B3TGiggjtN8sfmSVR8yikA==","length":22803,"stub":true},"db-migrate-0.5.1.tgz":{"content_type":"application/octet-stream","revpos":58,"digest":"md5-2EPgLS4JaspknnHv28gt9A==","length":22648,"stub":true},"db-migrate-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":56,"digest":"md5-iTmg/NS2I2CEQ00/dGckRA==","length":19216,"stub":true},"db-migrate-0.4.2.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-e5qIn0f5Og1bMnpJ+wPOQw==","length":18970,"stub":true},"db-migrate-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-vE5NAPzNCCEl+foHNKnSvQ==","length":18441,"stub":true},"db-migrate-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-/V7UAkFjGVH/3fg1qAImsA==","length":18362,"stub":true},"db-migrate-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-o7LrfiT3tDeoqn5nrAQ3RQ==","length":23871,"stub":true},"db-migrate-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-gRFao4R7sBxndA31NdCobA==","length":23826,"stub":true},"db-migrate-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-7T+btQ/VMOKHAasOi7kKAg==","length":23764,"stub":true},"db-migrate-0.2.8.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-vJ+If08wATlFt7YYYr9QtQ==","length":23232,"stub":true},"db-migrate-0.2.7.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-7+vrFX9lgcncSdzkyJmIYQ==","length":23111,"stub":true},"db-migrate-0.2.6.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-m8hhbUg/xbrS72FvmywnMQ==","length":22955,"stub":true},"db-migrate-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-1OjlBOoIh0p69Sq+YoSQ6A==","length":22947,"stub":true},"db-migrate-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-7B+wdHnp6UMOBIigNHdzDQ==","length":22530,"stub":true},"db-migrate-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-whs6VjOjycjZJCr8ZtEWIQ==","length":21752,"stub":true},"db-migrate-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-oXbYnNraqp6sVn3i9exCAg==","length":21748,"stub":true},"db-migrate-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-3ARp2MrAroJIA/sBD34/6A==","length":21745,"stub":true},"db-migrate-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-FDnOOeLOT3D+jEfpRpulXA==","length":21658,"stub":true},"db-migrate-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-o/BtQQd0qDMnQ3QTisJcNQ==","length":21207,"stub":true},"db-migrate-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-xTifoNb4pZ9P6Lg5Q1QXJg==","length":20627,"stub":true},"db-migrate-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-QtN0Lg7P1EkHyM2MIMYOSA==","length":15348,"stub":true},"db-migrate-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-KkuBDHLZ8JOpr9+JQ8MGgQ==","length":15185,"stub":true},"db-migrate-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-c1Qge2DNymklaUQvOm3Jaw==","length":15130,"stub":true},"db-migrate-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-GXWUZFPrbzxcYLjzfVLjqA==","length":15048,"stub":true},"db-migrate-0.0.6.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-adzAoR+qc2LkaGTfK45siw==","length":14409,"stub":true},"db-migrate-0.0.5.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-hZIdZ7sHKcE2IbSFGozxLA==","length":20480,"stub":true},"db-migrate-0.0.4.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-XCQ8gVKSPx3qaoGNPd8xvQ==","length":20480,"stub":true},"db-migrate-0.0.3.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-z9odOXP9l8Foov0oR123ew==","length":20480,"stub":true},"db-migrate-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-h8WICDGThl3LU9oGVCRneA==","length":20480,"stub":true},"db-migrate-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-Eu1h9UNfazYldJveviwnrA==","length":20480,"stub":true}},"_etag":"\"2BIODXYUWBV45CFPGFEXXRGEZ\""}